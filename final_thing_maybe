import statsapi
from urllib.request import urlopen as uReq
import json
import time

# 135 = Padres, 110 = Orioles
game = statsapi.schedule(team=135) # Get game today.

for a in game:
    game_id = a['game_id'] # Print out the game id to get the live feed.

# URL to request the live feed.
url = "https://statsapi.mlb.com/api/v1.1/game/" + F"{game_id}" + "/feed/live"

while(True):
    uClient = uReq(url)  # Open up connection
    byteFile = uClient.read()  # Grab the page
    uClient.close()  # We are done with this (for now)

    jsonFile = json.loads(byteFile) # Load file as JSON

    # Probably the structure of a scorecard

    # 1) Inning and half. Shamelessly copied from you.

    inning = jsonFile["liveData"]["linescore"]["currentInning"]
    half = jsonFile["liveData"]["linescore"]["inningHalf"]
    outs = jsonFile["liveData"]["plays"]["currentPlay"]["count"]["outs"]

    # Need to check if there are three outs.
    if outs == 3:
        if half == "Top":
            half = "Middle"
        else:
            half = "End"

    print("Inning:", half, inning)

    # 2) Scores and teams. Also shamelessly copied from you.
    home_score = jsonFile["liveData"]["linescore"]["teams"]["home"]["runs"]
    away_score = jsonFile["liveData"]["linescore"]["teams"]["away"]["runs"]
    home_team = jsonFile["gameData"]["teams"]["home"]["name"]
    away_team = jsonFile["gameData"]["teams"]["away"]["name"]

    print("Away team:", away_team)
    print("Home team:", home_team)
    print("Score:", away_score, "-", home_score)

    # 3) Pitcher and Batter Name.
    pitcher = jsonFile["liveData"]["plays"]["currentPlay"]["matchup"]["pitcher"]["fullName"]
    batter = jsonFile["liveData"]["plays"]["currentPlay"]["matchup"]["batter"]["fullName"]

    print("Pitcher:", pitcher)
    print("Batter:", batter)

    # 4) Batter Name along with batting average or stat line. 

    # 5) Count and outs. 

    # To print all counts. 
    '''
    allPlays = jsonFile["liveData"]["plays"]["allPlays"]
    count_allPlays = len(allPlays)

    for i in range(count_allPlays):
        # Get the ith play of the game
        ithPlay = allPlays[i]["playEvents"]
        # There are many updates to the counts like 0-0 to 1-0 or 0-1. We can be stuck at 3-2 with continuous foul balls.
        count_ithPlay = len(ithPlay)
        for j in range(count_ithPlay):
            jthCount_ithPlay = ithPlay[j]["count"]
            print(jthCount_ithPlay)
    '''

    # To get the current count and outs.
    current_count = jsonFile["liveData"]["plays"]["currentPlay"]["count"]
    print("Count:", current_count["balls"], "-", current_count["strikes"])
    print("Outs:", current_count["outs"])

    '''
    # Get the latest result of an at-bat. This may not always work.
    try:
        result = jsonFile["liveData"]["plays"]["allPlays"][-1]["result"]["description"]
        print(result)
    except:
        pass
    '''

    # Get occupied bases
    runners = jsonFile["liveData"]["plays"]["currentPlay"]["runners"]

    # Track base occupancy
    bases = [0, 0, 0]

    # Loop through all runners on base
    for runner in runners:
        if "movement" in runner and runner["movement"]["end"] is not None:
            base_str = runner["movement"]["end"]
            if base_str == "1B":
                bases[0] = 1
            elif base_str == "2B":
                bases[1] = 1
            elif base_str == "3B":
                bases[2] = 1

    # Print which bases are occupied
    print("Bases:", bases)

    print()
    time.sleep(2)

    # print(jsonFile)
